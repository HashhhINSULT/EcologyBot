import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


TOKEN = "8025273049:AAE-zutFbjYpKnog7GVXZ6as4w8aIUHbAzw"
bot = telebot.Telebot(TOKEN)

quiz = [
    {"question": "–ü—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º—É—Å–æ—Ä–æ–º?", "options": ["–ø–æ–¥—Å—Ç–∞–≤–∫–∞ –¥–ª—è —Å–∞–ª—Ñ–µ—Ç–æ–∫", "–∫–æ—Ä–æ–±–∫–∞ –∏–∑-–ø–æ–¥ –æ–±—É–≤–∏", "–æ–±—ë—Ä—Ç–∫–∞ –æ—Ç –∫–æ–Ω—Ñ–µ—Ç—ã"], "answer": 0},
    {"question": "–ö—É–¥–∞ –Ω–∞ —É–ª–∏—Ü–∞—Ö –≥–æ—Ä–æ–¥–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—Ç –º—É—Å–æ—Ä?", "options": ["–≤ –º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥", "–Ω–∞ —Å–≤–∞–ª–∫—É", "–≤ —É—Ä–Ω—É"], "answer": 2},
    {"question": "–ö–∞–∫–æ–π –º—É—Å–æ—Ä –≤ –ø—Ä–∏—Ä–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ–ª—å—à–µ –¥—Ä—É–≥–∏—Ö?", "options": ["–º–∞–Ω–¥–∞—Ä–∏–Ω–æ–≤–∞—è –∫–æ—Ä–∫–∞", "—Å—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞", "–æ–≥—Ä—ã–∑–æ–∫ –æ—Ç —è–±–ª–æ–∫–∞"], "answer": 1},
    {"question": "–ö—É–¥–∞ –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –º—É—Å–æ—Ä?", "options": ["–≤ –º—É—Å–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "–Ω–∞ —Å–≤–∞–ª–∫—É", "–≤ –æ–≤—Ä–∞–≥"], "answer": 2},
]

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {"current_question": 0, "score": 0}
    send_question(message.chat.id) 

def send_question(user_id):
    user = user_data[user_id]
    current = user["current_question"]

    if current < len(quiz):
        question = quiz[current]
        markup = InlineKeyboardMarkup()

for i, option in enumerate(question["options"]):
        markup.add(InlineKeyboardButton(option, callback_data=f"{current}:{i}"))
    
        bot.send_message(user_id, question["question"], reply_markup=markup)
else:
        
        score = user["score"]
        total = len(quiz)
        bot.send_message(user_id, f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ {total}. üéâ")
        del user_data[user_id]

@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call):
    user_id = call.message.chat.id
    if user_id not in user_data:
        bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑.")
        return

    user = user_data[user_id]
    current = user["current_question"]
    question = quiz[current]
    correct_answer = question["answer"]
    
    question_index, user_answer = map(int, call.data.split(":"))

    if user_answer == correct_answer:
        user["score"] += 1
        bot.send_message(user_id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
    else:
        bot.send_message(user_id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. üò¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][correct_answer]}")

    user["current_question"] += 1
    send_question(user_id)


@bot.message_handler(commands=['info'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–∫–æ–ª–æ–≥–∏–∏.")



bot.polling()
